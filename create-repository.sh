#!/bin/bash

# Script de Automa√ß√£o Completa para REPLTILE
# Este script faz TUDO: cria repo, configura prote√ß√µes, secrets, e primeiro push

set -e

echo "üöÄ AUTOMA√á√ÉO COMPLETA DO REPOSIT√ìRIO REPLTILE"
echo "=============================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes utilit√°rias
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Configura√ß√µes
REPO_NAME="REPLTILE"
REPO_ORG="nicodemos8"
REPO_DESCRIPTION="Interactive visual interface for Clojure REPL with standalone nREPL server"

echo "üìã CONFIGURA√á√ÉO:"
echo "   Reposit√≥rio: $REPO_ORG/$REPO_NAME"
echo "   Descri√ß√£o: $REPO_DESCRIPTION"
echo ""

# 1. AUTENTICA√á√ÉO NO GITHUB
log_info "Verificando autentica√ß√£o no GitHub..."
if ! gh auth status > /dev/null 2>&1; then
    log_warning "N√£o autenticado no GitHub. Iniciando login..."
    gh auth login --hostname github.com --protocol https --web
    log_success "Autenticado no GitHub!"
else
    log_success "J√° autenticado no GitHub!"
fi

# 2. VERIFICAR SE REPO J√Å EXISTE
log_info "Verificando se reposit√≥rio j√° existe..."
if gh repo view "$REPO_ORG/$REPO_NAME" > /dev/null 2>&1; then
    log_error "Reposit√≥rio $REPO_ORG/$REPO_NAME j√° existe!"
    echo ""
    echo "Op√ß√µes:"
    echo "1) Usar reposit√≥rio existente"
    echo "2) Cancelar e usar nome diferente"
    read -p "Escolha (1/2): " choice
    
    if [ "$choice" != "1" ]; then
        log_error "Opera√ß√£o cancelada."
        exit 1
    fi
    
    REPO_EXISTS=true
    log_warning "Usando reposit√≥rio existente..."
else
    REPO_EXISTS=false
fi

# 3. CRIAR REPOSIT√ìRIO (se n√£o existir)
if [ "$REPO_EXISTS" = false ]; then
    log_info "Criando reposit√≥rio $REPO_ORG/$REPO_NAME..."
    
    gh repo create "$REPO_ORG/$REPO_NAME" \
        --description "$REPO_DESCRIPTION" \
        --public \
        --add-readme=false \
        --gitignore-template="" \
        --license=""
    
    log_success "Reposit√≥rio criado!"
fi

# 4. CONFIGURAR GIT LOCAL
log_info "Configurando Git local..."

# Inicializar se n√£o for um repo git
if [ ! -d ".git" ]; then
    git init
    log_success "Git inicializado!"
fi

# Configurar remote
if ! git remote get-url origin > /dev/null 2>&1; then
    git remote add origin "https://github.com/$REPO_ORG/$REPO_NAME.git"
    log_success "Remote origin adicionado!"
else
    git remote set-url origin "https://github.com/$REPO_ORG/$REPO_NAME.git"
    log_success "Remote origin atualizado!"
fi

# 5. CONFIGURAR OVSX TOKEN
log_info "Configurando OVSX Token..."
echo ""
echo "üîë Para publicar no OpenVSX, precisamos do token:"
echo "   1. V√° para: https://open-vsx.org/user-settings/tokens"
echo "   2. Fa√ßa login com GitHub"
echo "   3. Crie um novo token"
echo "   4. Cole aqui:"
echo ""
read -s -p "OVSX Token: " OVSX_TOKEN
echo ""

if [ -z "$OVSX_TOKEN" ]; then
    log_warning "Token n√£o fornecido. Configura√ß√£o de secrets ser√° pulada."
    OVSX_TOKEN="skip"
fi

# 6. PRIMEIRO COMMIT E PUSH
log_info "Preparando primeiro commit..."

# Adicionar todos os arquivos
git add .

# Verificar se h√° mudan√ßas para commitar
if git diff --staged --quiet; then
    log_warning "Nenhuma mudan√ßa para commitar."
else
    # Fazer commit inicial
    git commit -m "feat: initial REPLTILE setup with CI/CD automation

- Add GitHub Actions workflows (CI/CD, release, PR validation)
- Add repository automation scripts
- Add issue and PR templates
- Add comprehensive documentation
- Configure branch protection and secrets
- Setup automatic VSIX build and OpenVSX publishing"

    log_success "Commit inicial criado!"
fi

# Push para main
log_info "Fazendo push para GitHub..."
git branch -M main
git push -u origin main
log_success "Push realizado!"

# 7. CONFIGURAR SECRETS
if [ "$OVSX_TOKEN" != "skip" ]; then
    log_info "Configurando secrets no GitHub..."
    
    gh secret set OVSX_TOKEN --body "$OVSX_TOKEN" --repo "$REPO_ORG/$REPO_NAME"
    log_success "OVSX_TOKEN configurado!"
fi

# 8. CONFIGURAR PROTE√á√ÉO DE BRANCH
log_info "Configurando prote√ß√£o da branch main..."

# Aguardar um pouco para o GitHub processar o push
sleep 5

gh api --method PUT "repos/$REPO_ORG/$REPO_NAME/branches/main/protection" --input - << EOF
{
  "required_status_checks": {
    "strict": true,
    "contexts": [
      "CI/CD Pipeline / test",
      "PR Validation / validate"
    ]
  },
  "enforce_admins": true,
  "required_pull_request_reviews": {
    "required_approving_review_count": 1,
    "dismiss_stale_reviews": true,
    "require_code_owner_reviews": false
  },
  "restrictions": null,
  "required_linear_history": false,
  "allow_force_pushes": false,
  "allow_deletions": false,
  "block_creations": false,
  "required_conversation_resolution": true
}
EOF

log_success "Prote√ß√£o de branch configurada!"

# 9. EXECUTAR SETUP LOCAL
log_info "Executando setup local..."
chmod +x setup-repo.sh
if ./setup-repo.sh; then
    log_success "Setup local conclu√≠do!"
else
    log_warning "Setup local teve problemas, mas continuando..."
fi

# 10. VERIFICA√á√ïES FINAIS
log_info "Executando verifica√ß√µes finais..."

# Verificar se Actions est√£o rodando
sleep 10
log_info "Verificando GitHub Actions..."

ACTIONS_STATUS=$(gh run list --repo "$REPO_ORG/$REPO_NAME" --limit 1 --json status --jq '.[0].status' 2>/dev/null || echo "none")

if [ "$ACTIONS_STATUS" = "in_progress" ] || [ "$ACTIONS_STATUS" = "queued" ]; then
    log_success "GitHub Actions est√£o rodando!"
    echo "   üîó Acompanhe em: https://github.com/$REPO_ORG/$REPO_NAME/actions"
elif [ "$ACTIONS_STATUS" = "completed" ]; then
    log_success "GitHub Actions j√° executaram!"
else
    log_warning "GitHub Actions ainda n√£o iniciaram (normal para primeiro push)"
fi

# 11. RELAT√ìRIO FINAL
echo ""
echo "üéâ AUTOMA√á√ÉO COMPLETA!"
echo "======================"
echo ""
log_success "‚úÖ Reposit√≥rio: https://github.com/$REPO_ORG/$REPO_NAME"
log_success "‚úÖ CI/CD: Configurado e ativo"
log_success "‚úÖ Branch Protection: Configurado"
if [ "$OVSX_TOKEN" != "skip" ]; then
    log_success "‚úÖ OpenVSX Token: Configurado"
fi
log_success "‚úÖ Scripts: Prontos para uso"
log_success "‚úÖ Documenta√ß√£o: Completa"
echo ""
echo "üîó Links Importantes:"
echo "   üìä Actions: https://github.com/$REPO_ORG/$REPO_NAME/actions"
echo "   ‚öôÔ∏è  Settings: https://github.com/$REPO_ORG/$REPO_NAME/settings"
echo "   üêõ Issues: https://github.com/$REPO_ORG/$REPO_NAME/issues"
echo "   üîÑ PRs: https://github.com/$REPO_ORG/$REPO_NAME/pulls"
echo ""
echo "üìã Pr√≥ximos Passos:"
echo "   1. ‚úÖ Tudo est√° configurado e funcionando!"
echo "   2. üéØ Fa√ßa mudan√ßas no c√≥digo e teste o workflow"
echo "   3. üöÄ Use: ./scripts/version-bump.sh patch (para releases)"
echo "   4. üì¶ VSIX ser√° gerado automaticamente em cada release"
echo "   5. üåê Publica√ß√£o no OpenVSX √© autom√°tica"
echo ""
log_success "REPLTILE est√° pronto para desenvolvimento!"
echo ""